" :help keycodes :map   :help <C-   control键
" <bslash><Esc><space><tab>
"imap insert mode map ， vmap virtual map，nmap normal mode map
"
" <leader>  按键 \
:sy on "语法加亮
" :set noerrorbells  "no error sound,  default: set errorbells"
" use a visual bell instead of beeping
:set vb t_vb=

"自动选择维诺健类型"
:filetype on 
" :set wrap linebreak nolist
" :set formatoptions=l "Keeps the visual textwidth but doesn't add new line in insert mode
:set textwidth=0 " stop split line automatically"
:set number "设置行号
" :set relativenumber
":set nonumber "取消显示行数
:set ff=unix
:set autoindent   "继承前一行的缩进方式，特别适用于多行注释
":set ai       "enable autoindenting 和上面auto indenting 一样
:set smartindent  "为C程序提供自动缩进  ":set  nosmartindent
:set ts=4    "为文本输入设置 set tabstop=4   （tab） 为4个空格
:set tabstop=4
:set softtabstop=4
:set shiftwidth=4   " 设置之后 shift +  <> 缩进 4个 空格
:set sw=4  "缩进尺寸为4个空格
:set expandtab    "expandtab 缩进用空格来表示，noexpandtab 则是用制表符表示一个缩进。
:set ignorecase  "搜索忽略大小写  ":set smartcase   "如果有一个大写字母，自动切换到case sensitive
:set nocompatible     "关闭兼容模式,  兼容老版本vi
:set nobackup
"不要生成swap文件，当buffer被丢弃的时候隐藏它
:set bufhidden=hide
:set noswapfile
:set noundofile "去除 .un~ 文件，persistent undo 功能。关闭文件再打开，还可以undo
:set laststatus=2      "2显示 状态栏，1 不显示状态栏
"读取txt文件时，中文乱码的解决方法
" 设置enc=encoding
":set enc=gb18030,gbk,gb2312,cp936,utf-8,usc-bom
:set encoding=utf-8 "设置vim编辑状态的编码方式
"以下是滇狐推荐的一个 fileencodings 设置：
"简体中文 (GBK/GB18030)、繁体中文 (Big5)、日文 (euc-jp) 和韩文 (euc-kr)
:set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
":set fileencodings=latin1,utf-8,utf-16,gbk,big5,gb18030,gb2312,cp936  "设置文件读取，编码顺序，大编码在前，小编码在后。
:set fileencoding=utf-8 "设置文件保存，编码方式，必须与encoding不同,如果为空，默认使用encoding的值
:set hlsearch   "搜索时高亮，# 高亮当前单词
"在搜索时，输入的词句的逐字符高亮
:set incsearch
:set mouse=a   "激活鼠标
:set foldmethod=syntax   "设置折叠，indent,    zo或hl左右 打开折叠，zc 折叠
"打开文件是默认不折叠代码
:set foldlevelstart=99
" :set tags =./.tags,.tags "exuberant-ctags"
" .tags.d/*.ctags "Universal-ctags"
:set tags =./.tags,.tags,./.tags.d/*.ctags,.tags.d/*.ctags,~/.cache/tags
:set ambiwidth=double
:set signcolumn=yes
:set sessionoptions-=blank "doesnot store/restore empty buffer to sesison"
" f/b page, up/down half page
nmap gk <C-u>
vmap gk <C-u>
nmap gj <C-d>
vmap gj <C-d>
nmap gf <C-f>
vmap gf <C-f>
nmap gb <C-b>
vmap gb <C-b>
" map wutf to w ++utf-8 %  convert file code to utf-8  <bar>:e!  = |:e! reload file
cmap wu w!<Space>++enc=utf-8<Space>%<cr><Bar>:e!<cr>
" switch window
nmap wh <C-W>h
nmap wj <C-W>j
nmap wk <C-W>k
nmap wl <C-W>l
nmap wp <C-W>p
nmap <up> :res -5<CR>
nmap <down> :res +5<CR>
nmap <left> :vertical resize-5<CR>
nmap <right> :vertical resize+5<CR>
"th tl move to left/right tab
nmap th gT
nmap tl gt
" show youCompleteMe , list
nmap <D-f> /
map <D-F> :Rg<CR>

" go to privous active tab
augroup goPreviousTab
    if !exists('g:Lasttab')
        let g:Lasttab = 1
        let g:Lasttab_backup = 1
    endif
    autocmd! TabLeave * let g:Lasttab_backup = g:Lasttab | let g:Lasttab = tabpagenr()
    autocmd! TabClosed * let g:Lasttab = g:Lasttab_backup
    nmap tp :exe "tabn ".g:Lasttab<CR>
augroup END

:set clipboard=unnamed,unnamedplus  "共享 windows 剪切板
" :set t_Co=256
" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

"使用<caps clock>快捷键代替esc退出编辑模式, imap or inoremap表示编辑模式,nmap or nnoremap表示normal模式
":nmap - Display normal mode maps
":imap - Display insert mode maps
":vmap - Display visual and select mode maps
":smap - Display select mode maps
":xmap - Display visual mode maps
":cmap - Display command-line mode maps
":omap - Display operator pending mode maps
"oo插入空白行,不进入编辑模式
"nnoremap o o<Esc>
"nnoremap O O<Esc>
"For some reason, vim registers <C-/> as <C-_>

"Cursor settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
" let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)
:set guicursor=a:blinkon0

" set the font
" set guifont=Monaco:h12
" set guifont=Source\ Code\ Pro\ for\ Powerline:h12
" set guifont=Hack\ Nerd\ Font:h12

" using powerline fonts
" set rtp+=/usr/local/powerline/powerline/bindings/vim

" set rtp+=/usr/local/lib/python2.7/site-packages/powerline/bindings/vim
" if has("gui_running")
"    let s:uname = system("uname")
"    if s:uname == "Darwin\n"
"       set guifont=Meslo\ LG\ S\ for\ Powerline
"    endif
" endif

call plug#begin('~/.vim/plugged')
" Plug 'leafgarland/typescript-vim' " TypeScript support
Plug 'mhinz/vim-signify' " Git Wrapper代替fugitive,可查看diff
" :SignifyDiff   查看diff

" Plugin outside ~/.vim/plugged with post-update hook
" fuzzy file content finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'chiel92/vim-autoformat'
Plug 'omnisharp/omnisharp-vim'
Plug 'oranget/vim-csharp'

"auto generate tags"
if has("gui_macvim")
    source ~/.vim/vimPlugins/vim-gutentags.vim
    source ~/.vim/vimPlugins/asyncrun.vim
    source ~/.vim/vimPlugins/supertab.vim " use tab to select auto autocomplete
    source ~/.vim/vimPlugins/vim-javascript.vim " javascript format
    source ~/.vim/vimPlugins/vdebug.vim
    source ~/.vim/vimPlugins/ale.vim
    source ~/.vim/vimPlugins/tagbar.vim
    source ~/.vim/vimPlugins/leaderf.vim
    source ~/.vim/vimPlugins/youcompleteme.vim
    source ~/.vim/vimPlugins/nerdcommenter.vim
    source ~/.vim/vimPlugins/nerdtree.vim
    source ~/.vim/vimPlugins/vim-airline.vim
    source ~/.vim/vimPlugins/others.vim
endif
if has("gui_win32")
	set guifont=DejaVu_Sans_Mono_for_Powerline:h10:cDEFAULT
    source ~\.vim\vimPlugins\vim-gutentags.vim
    source ~\.vim\vimPlugins\asyncrun.vim
    source ~\.vim\vimPlugins\supertab.vim " use tab to select auto autocomplete
    source ~\.vim\vimPlugins\vim-javascript.vim " javascript format
    source ~\.vim\vimPlugins\vdebug.vim
    source ~\.vim\vimPlugins\ale.vim
    source ~\.vim\vimPlugins\tagbar.vim
    source ~\.vim\vimPlugins\leaderf.vim
    source ~\.vim\vimPlugins\youcompleteme.vim
    source ~\.vim\vimPlugins\nerdcommenter.vim
    source ~\.vim\vimPlugins\nerdtree.vim
    source ~\.vim\vimPlugins\vim-airline.vim
    source ~\.vim\vimPlugins\others.vim
endif
" Initialize plugin system
call plug#end()

augroup myVimrcAutoLoad
	" Remove all vimrc autocommands
    au!
    " au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvi:mrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
    autocmd BufWritePost $MYVIMRC source $MYVIMRC |AirlineRefresh|redraw
    autocmd BufWritePost $MYGVIMRC if has('gui_running')&& filereadable($MYGVIMRC) | so $MYGVIMRC | AirlineRefresh|endif | redraw

    "auto set .conf filetype
    " autocmd BufRead,BufNewFile *.config setf dosini
    autocmd BufRead,BufNewFile *.config setf apache 
augroup END



